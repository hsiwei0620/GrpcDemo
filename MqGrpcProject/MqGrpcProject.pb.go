// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MqGrpcProject.proto

package MqGrpcProject

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("MqGrpcProject.proto", fileDescriptor_a62a24b30c230a58) }

var fileDescriptor_a62a24b30c230a58 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xf6, 0x2d, 0x74, 0x2f,
	0x2a, 0x48, 0x0e, 0x28, 0xca, 0xcf, 0x4a, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x45, 0x11, 0x94, 0x12, 0x70, 0x0c, 0xf0, 0xf4, 0x0d, 0xf1, 0x09, 0x0e, 0xc9, 0xcc, 0x87,
	0x28, 0x00, 0x8b, 0x04, 0x7b, 0x84, 0xb8, 0x06, 0x22, 0x8b, 0xf8, 0x04, 0x04, 0xb9, 0x38, 0xf9,
	0xa2, 0x88, 0x04, 0x05, 0x87, 0x05, 0x04, 0x21, 0x8b, 0xf8, 0xba, 0x06, 0x06, 0x05, 0x87, 0xc1,
	0x44, 0x8c, 0x56, 0x30, 0x73, 0xb1, 0x43, 0xec, 0x2a, 0x16, 0x0a, 0xe4, 0xe2, 0x85, 0xc9, 0xc7,
	0x07, 0xa7, 0xe6, 0xa5, 0x08, 0xc9, 0xeb, 0xa1, 0xba, 0x0d, 0x2e, 0x1b, 0x94, 0x5a, 0x58, 0x9a,
	0x5a, 0x5c, 0x22, 0x25, 0x8b, 0x5b, 0x41, 0x41, 0x4e, 0xa5, 0x12, 0x03, 0xc4, 0x48, 0x88, 0xd3,
	0x71, 0x19, 0x09, 0x95, 0xc5, 0x6d, 0x24, 0x5c, 0x01, 0xb2, 0x91, 0x60, 0xbf, 0xe3, 0x34, 0x12,
	0x22, 0x8b, 0xc7, 0x48, 0x98, 0x02, 0x24, 0x23, 0x21, 0x81, 0x87, 0xcb, 0x48, 0xa8, 0x2c, 0x6e,
	0x23, 0xe1, 0x0a, 0x90, 0x8d, 0x04, 0x87, 0x3e, 0x4e, 0x23, 0x21, 0xb2, 0x78, 0x8c, 0x84, 0x29,
	0x00, 0x1b, 0xe9, 0x64, 0xcc, 0x25, 0x9a, 0x99, 0xaf, 0x97, 0x5e, 0x54, 0x90, 0x8c, 0xaa, 0xd2,
	0x49, 0x08, 0x85, 0x1b, 0x00, 0x8a, 0xd7, 0x00, 0xc6, 0x45, 0x4c, 0xcc, 0x1e, 0x3e, 0xe1, 0x49,
	0x6c, 0xe0, 0x68, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x3a, 0xe5, 0x69, 0x66, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MqGrpcsClient is the client API for MqGrpcs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MqGrpcsClient interface {
	// Sends a greeting
	APMEQRSV_Send(ctx context.Context, in *APMEQRSV_Request, opts ...grpc.CallOption) (*APMEQRSV_Reply, error)
	APIMTLST_Send(ctx context.Context, in *APIMTLST_Request, opts ...grpc.CallOption) (*APIMTLST_Reply, error)
	APISHTEQ_Send(ctx context.Context, in *APISHTEQ_Request, opts ...grpc.CallOption) (*APISHTEQ_Reply, error)
	APLPRDBM_Send(ctx context.Context, in *APLPRDBM_Request, opts ...grpc.CallOption) (*APLPRDBM_Reply, error)
	APLRSVPR_Send(ctx context.Context, in *APLRSVPR_Request, opts ...grpc.CallOption) (*APLRSVPR_Reply, error)
}

type mqGrpcsClient struct {
	cc *grpc.ClientConn
}

func NewMqGrpcsClient(cc *grpc.ClientConn) MqGrpcsClient {
	return &mqGrpcsClient{cc}
}

func (c *mqGrpcsClient) APMEQRSV_Send(ctx context.Context, in *APMEQRSV_Request, opts ...grpc.CallOption) (*APMEQRSV_Reply, error) {
	out := new(APMEQRSV_Reply)
	err := c.cc.Invoke(ctx, "/MqGrpcProject.MqGrpcs/APMEQRSV_Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqGrpcsClient) APIMTLST_Send(ctx context.Context, in *APIMTLST_Request, opts ...grpc.CallOption) (*APIMTLST_Reply, error) {
	out := new(APIMTLST_Reply)
	err := c.cc.Invoke(ctx, "/MqGrpcProject.MqGrpcs/APIMTLST_Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqGrpcsClient) APISHTEQ_Send(ctx context.Context, in *APISHTEQ_Request, opts ...grpc.CallOption) (*APISHTEQ_Reply, error) {
	out := new(APISHTEQ_Reply)
	err := c.cc.Invoke(ctx, "/MqGrpcProject.MqGrpcs/APISHTEQ_Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqGrpcsClient) APLPRDBM_Send(ctx context.Context, in *APLPRDBM_Request, opts ...grpc.CallOption) (*APLPRDBM_Reply, error) {
	out := new(APLPRDBM_Reply)
	err := c.cc.Invoke(ctx, "/MqGrpcProject.MqGrpcs/APLPRDBM_Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqGrpcsClient) APLRSVPR_Send(ctx context.Context, in *APLRSVPR_Request, opts ...grpc.CallOption) (*APLRSVPR_Reply, error) {
	out := new(APLRSVPR_Reply)
	err := c.cc.Invoke(ctx, "/MqGrpcProject.MqGrpcs/APLRSVPR_Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqGrpcsServer is the server API for MqGrpcs service.
type MqGrpcsServer interface {
	// Sends a greeting
	APMEQRSV_Send(context.Context, *APMEQRSV_Request) (*APMEQRSV_Reply, error)
	APIMTLST_Send(context.Context, *APIMTLST_Request) (*APIMTLST_Reply, error)
	APISHTEQ_Send(context.Context, *APISHTEQ_Request) (*APISHTEQ_Reply, error)
	APLPRDBM_Send(context.Context, *APLPRDBM_Request) (*APLPRDBM_Reply, error)
	APLRSVPR_Send(context.Context, *APLRSVPR_Request) (*APLRSVPR_Reply, error)
}

func RegisterMqGrpcsServer(s *grpc.Server, srv MqGrpcsServer) {
	s.RegisterService(&_MqGrpcs_serviceDesc, srv)
}

func _MqGrpcs_APMEQRSV_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APMEQRSV_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqGrpcsServer).APMEQRSV_Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MqGrpcProject.MqGrpcs/APMEQRSV_Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqGrpcsServer).APMEQRSV_Send(ctx, req.(*APMEQRSV_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqGrpcs_APIMTLST_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIMTLST_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqGrpcsServer).APIMTLST_Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MqGrpcProject.MqGrpcs/APIMTLST_Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqGrpcsServer).APIMTLST_Send(ctx, req.(*APIMTLST_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqGrpcs_APISHTEQ_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APISHTEQ_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqGrpcsServer).APISHTEQ_Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MqGrpcProject.MqGrpcs/APISHTEQ_Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqGrpcsServer).APISHTEQ_Send(ctx, req.(*APISHTEQ_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqGrpcs_APLPRDBM_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APLPRDBM_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqGrpcsServer).APLPRDBM_Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MqGrpcProject.MqGrpcs/APLPRDBM_Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqGrpcsServer).APLPRDBM_Send(ctx, req.(*APLPRDBM_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MqGrpcs_APLRSVPR_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APLRSVPR_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqGrpcsServer).APLRSVPR_Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MqGrpcProject.MqGrpcs/APLRSVPR_Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqGrpcsServer).APLRSVPR_Send(ctx, req.(*APLRSVPR_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _MqGrpcs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MqGrpcProject.MqGrpcs",
	HandlerType: (*MqGrpcsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "APMEQRSV_Send",
			Handler:    _MqGrpcs_APMEQRSV_Send_Handler,
		},
		{
			MethodName: "APIMTLST_Send",
			Handler:    _MqGrpcs_APIMTLST_Send_Handler,
		},
		{
			MethodName: "APISHTEQ_Send",
			Handler:    _MqGrpcs_APISHTEQ_Send_Handler,
		},
		{
			MethodName: "APLPRDBM_Send",
			Handler:    _MqGrpcs_APLPRDBM_Send_Handler,
		},
		{
			MethodName: "APLRSVPR_Send",
			Handler:    _MqGrpcs_APLRSVPR_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MqGrpcProject.proto",
}
